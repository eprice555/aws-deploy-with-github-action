on:
  workflow_dispatch:
    inputs:
      image-tag:
        default: "latest"
        description: "Name to image tag to deploy"
  workflow_call:
    inputs:
      working-directory:
        required: false
        type: string
        default: '.'
      image-tag:
        required: true
        type: string
    outputs:
      app_url:
        description: "The ECS application URL"
        value: ${{ jobs.deploy.outputs.app_url }}
      app_ip:
        description: "The ECS application public ip"
        value: ${{ jobs.deploy.outputs.app_ip }}

name: cd
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # need this for OIDC
      contents: read
    environment: main
    outputs:
      app_url: ${{ steps.set_app_url.outputs.app_url }}
      app_ip:  ${{ steps.set_app_ip.outputs.app_ip }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Echo
        run: echo "image-tag is ${{ inputs.image-tag }}"

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}
      
      # Deploy ECS Cluster using templates/cluster.yaml
      - name: Deploy ECS Cluster
        id: deploy-ecs-stack
        uses: aws-actions/aws-cloudformation-github-deploy@master
        with:
          name: cluster
          template: ./templates/cluster.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: >-
            ECSClusterName=${{ vars.ECS_CLUSTER_NAME }},
            AppName=${{ vars.APP_NAME }},
            VPCStackName=${{ vars.VPC_STACK_NAME }}

      - name: Get ECS env vars
        id: get_ecs_ven_vars
        run: |
          ECS_CLUSTER=$(aws cloudformation describe-stacks --stack-name cluster --region ${{ vars.AWS_REGION }} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="ECSCluster") | .OutputValue')
          ECS_SERVICE=$(aws cloudformation describe-stacks --stack-name cluster --region ${{ vars.AWS_REGION }} | jq -r '.Stacks[0].Outputs[] | select(.OutputKey=="ECSService") | .OutputValue')
          echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
          echo "ECS_SERVICE=$ECS_SERVICE" >> $GITHUB_ENV
      
      # Update ECS Task Definition with image tag
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Download task definition
        run: |
          aws ecs describe-task-definition \
           --task-definition ${{ vars.APP_NAME }}-task-definition-family \
           --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ vars.APP_NAME }}
          image: "${{ steps.login-ecr.outputs.registry }}/${{ vars.ECR_REPO_NAME }}:${{ inputs.image-tag }}"

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true


      # TODO
      # Configure AWS credentials
      # Deploy ECS Cluster using templates/cluster.yaml
      # Update ECS Task Definition with image tag
      # Deploy new ECS Task
      # Output the app URL