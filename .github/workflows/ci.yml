name: ci
on:
  workflow_dispatch:
  workflow_call:
    outputs:
      image-tag:
        description: "image tag"
        value: ${{ jobs.build-and-test.outputs.image-tag }}
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # need this for OIDC
      contents: read
    environment: main
    outputs:
      image-tag: ${{ steps.set-image-tag.outputs.IMAGE_TAG }} 
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
            # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ vars.AWS_REGION }}

      # CloudFormation Lint
      - name: Cfn Lint
        id: cfn-lint
        uses: scottbrenner/cfn-lint-action@v2

      - name: Run Cfn Lint
        id: cfn-lint-run
        run: |
          shopt -s globstar # enable globbing
          cfn-lint --version
          cfn-lint -t ./templates/*.yaml

      # CloudFormation Static Analysis
      - name: Cfn Nag
        id: cfn-nag
        uses: stelligent/cfn_nag@master
        with:
          input_path: templates
          #output_path: cfn_nag.sarif

      # Summarize cfn_nag failures and return it as exit code
      - name: Check for cfn_nag scan failures
        id: cfn-nag-check-failure        
        run: |
          exit `grep Failures cfn_nag.out | awk '{ SUM += $3} END { print SUM }'`
      
            # Build docker images
      - name: List app files
        run: |
          ls -l $GITHUB_WORKSPACE/app

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Detect Dockerfile changes
        id: detect-dockerfile-changes
        uses: tj-actions/changed-files@v40
        with:
          files: app/**

      - name: Build, tag, and push image to AWS ECR
        id: build-image
        if: steps.detect-dockerfile-changes.outputs.any_modified == 'true'
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "List all the files that have changed: ${{ steps.detect-dockerfile-changes.outputs.all_changed_files }}"
          echo "Building image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          cd app
          docker build \
              -t $ECR_REPOSITORY:latest \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
              -t $ECR_REPOSITORY:$IMAGE_TAG \
              -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Pushed image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Set new image tag
        id: set-image-tag
        run: |
          [[ -z $IMAGE_TAG ]] && echo "IMAGE_TAG=latest" >> $GITHUB_OUTPUT && echo "IMAGE_TAG=latest" >> $GITHUB_ENV || echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT && echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV 


      # TODO
      # Configure AWS credentials
      # CloudFormation Lint
      # CloudFormation Static Analysis
      # Build docker images
      # Set new image tag
      # Scan new image
      # Generate summary
